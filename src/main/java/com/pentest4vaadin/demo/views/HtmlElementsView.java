
package com.pentest4vaadin.demo.views;

import com.vaadin.flow.component.ComponentEventListener;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.dialog.Dialog;
import com.vaadin.flow.component.dialog.GeneratedVaadinDialog;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.grid.Grid.Column;
import com.vaadin.flow.component.grid.editor.Editor;
import com.vaadin.flow.component.html.Div;
import com.vaadin.flow.component.icon.Icon;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.data.binder.Binder;
import com.vaadin.flow.router.Route;
import com.vaadin.flow.router.RouterLayout;
import org.springframework.beans.factory.annotation.Autowired;
import com.pentest4vaadin.demo.entities.NativeHtmlMapping;
import com.pentest4vaadin.demo.presenter.HtmlElementsPresenter;

/**
 * View that shows the HTML mappings and allows editing them.
 */
@Route(value = "htmlelements", layout = MainView.class)
public class HtmlElementsView extends VerticalLayout implements RouterLayout, ComponentEventListener<GeneratedVaadinDialog.OpenedChangeEvent<Dialog>> {
    private Grid<NativeHtmlMapping> grid = new Grid<>();
    private HtmlElementsPresenter presenter;

    public HtmlElementsView(@Autowired HtmlElementsPresenter presenter, @Autowired AddElementDialog dialog) {
        this.presenter = presenter;
        dialog.addOpenedChangeListener(this);

        // Create action buttons.
        HorizontalLayout actionbar = new HorizontalLayout();
        Button addElement = new Button("Add", new Icon(VaadinIcon.PLUS), e -> {
            dialog.open();
        });
        Button btnDelete = new Button(new Icon(VaadinIcon.TRASH), e -> {
            presenter.deleteHtmlMappings(grid.getSelectedItems());
            grid.setItems(presenter.getAllNativeHtmlMappings());
        });
        actionbar.add(addElement, btnDelete);

        // Create list of elements.
        grid.setItems(presenter.getAllNativeHtmlMappings());
        grid.addColumn(NativeHtmlMapping::getId).setHeader("ID");
        Column<NativeHtmlMapping> htmltagColumn = grid.addColumn(NativeHtmlMapping::getHtmltag).setHeader("HTML Tag");
        Column<NativeHtmlMapping> nativehtmlColumn = grid.addColumn(NativeHtmlMapping::getNativeHtml).setHeader("Native HTML Element");
        Column<NativeHtmlMapping> defaultvalColumn = grid.addColumn(NativeHtmlMapping::getDefaultValue).setHeader("Default value");
        grid.setSelectionMode(Grid.SelectionMode.MULTI);

        // Create input elements for editing mode.
        TextField tfHtmltag = new TextField();
        TextField tfNativehtml = new TextField();
        TextField tfDefaultVal = new TextField();

        // Add editor.
        Binder<NativeHtmlMapping> binder = new Binder<>(NativeHtmlMapping.class);
        Editor<NativeHtmlMapping> editor = grid.getEditor();
        editor.setBinder(binder);
        editor.setBuffered(true);

        binder.bind(tfHtmltag, "htmltag");
        htmltagColumn.setEditorComponent(tfHtmltag);
        binder.bind(tfNativehtml, "nativeHtml");
        nativehtmlColumn.setEditorComponent(tfNativehtml);
        binder.bind(tfDefaultVal, "defaultValue");
        defaultvalColumn.setEditorComponent(tfDefaultVal);

        Button btnSave = new Button("Save", e -> editor.save());
        Button btnCancel = new Button("Cancel", e -> editor.cancel());
        Div buttons = new Div(btnSave, btnCancel);

        Column<NativeHtmlMapping> editorColumn = grid.addComponentColumn(element -> {
            Button btnEdit = new Button(new Icon(VaadinIcon.EDIT));
            btnEdit.addClickListener( e -> editor.editItem(element));
            return btnEdit;
        });
        editorColumn.setEditorComponent(buttons);

        editor.addSaveListener(event -> {
            presenter.saveElement(event.getItem());
        });

        this.add(actionbar, grid);
    }

    @Override
    public void onComponentEvent(GeneratedVaadinDialog.OpenedChangeEvent<Dialog> dialogOpenedChangeEvent) {
        // Refresh grid if dialog was closed.
        if (!dialogOpenedChangeEvent.isOpened()) {
            grid.setItems(presenter.getAllNativeHtmlMappings());
        }
    }
}
