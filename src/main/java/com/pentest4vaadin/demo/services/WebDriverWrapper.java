
package com.pentest4vaadin.demo.services;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

/**
 * Wrapper class for the selenium web drivers. Using a wrapper prevents the browsers to be opened at beginning.
 */
@Service
public class WebDriverWrapper {
    private static final Logger LOG = LoggerFactory.getLogger(WebDriverWrapper.class);
    private WebDriver browserDriver;
    private WebDriver scanDriver;
    private boolean headless = true;

    public WebDriver getBrowserWebDriver() {
        if(browserDriver == null) {
            LOG.debug("Instantiate new driver for the browser.");
            ChromeOptions options = new ChromeOptions();
            options.addArguments("disable-infobars");
            options.addArguments("--disable-web-security");
            browserDriver = new ChromeDriver(options);
        }
        return browserDriver;
    }

    public void resetBrowserDriver() {
        LOG.debug("Reset web driver for the browser.");
        if(browserDriver != null) {
            browserDriver.quit();
        }
        browserDriver = null;
    }

    public WebDriver getScanDriver() {
        if(scanDriver == null) {
            if(headless) {
                LOG.debug("Instantiate new headless driver for the scanner.");
                ChromeOptions options = new ChromeOptions();
                options.addArguments("--headless", "--disable-gpu", "--window-size=1920,1200", "--ignore-certificate-errors");
                scanDriver = new ChromeDriver(options);
            }
            else {
                LOG.debug("Instantiate new driver for the scanner.");
                scanDriver = new ChromeDriver();
            }
        }
        return scanDriver;
    }

    public void setScanDriverHeadless(boolean headless) {
        LOG.debug("Change headless mode of scanner driver to '"+headless+"'");
        this.headless = headless;
        resetScanDriver();
    }

    public void resetScanDriver() {
        if(scanDriver != null) {
            scanDriver.quit();
        }
        LOG.debug("Reset web driver for the scanner.");
        scanDriver = null;
    }
}
