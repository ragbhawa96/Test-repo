
package com.pentest4vaadin.demo.services;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.openqa.selenium.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import com.pentest4vaadin.demo.entities.UrlMapping;
import com.pentest4vaadin.demo.entities.VaElement;
import com.pentest4vaadin.demo.repositories.VaElementRepository;
import com.pentest4vaadin.demo.services.elements.AbstractAction;

import jakarta.annotation.PostConstruct;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;

/**
 * Class that transforms a request into actions and executes them with Selenium.
 */
@Service
public class SeleniumRequestHandler {
    private static final Logger LOG = LoggerFactory.getLogger(SeleniumRequestHandler.class);

    @Autowired
    private WebDriverWrapper driverWrapper;
    @Autowired
    private VaElementRepository vaElementRepository;
    private JavascriptExecutor js;

    @Autowired
    private Set<AbstractAction> actionSet;
    private HashMap<String, AbstractAction> actions;

    private HttpStatus lastStatus;

    @PostConstruct
    public void init() {
        // Create HashMap of action handlers.
        actions = new HashMap<>();
        for (AbstractAction a : actionSet) {
            actions.put(a.getName(), a);
        }
    }

    /**
     * Executes the actions in Selenium.
     *
     * @param urlParams used to find all associated elements
     * @param params    that are used as inputs for form elements
     * @return String Source code of the page after executing all actions
     */
    public String sendRequests(UrlMapping urlParams, Map<String, String> params) {
        WebDriver driver = driverWrapper.getScanDriver();

        LOG.debug("Open browser and load " + urlParams.getApplicationurl());
        try {
            driver.get(urlParams.getApplicationurl());
        } catch (WebDriverException e) {
            e.printStackTrace();
            // Driver was probably closed. Get new instance.
            driverWrapper.resetScanDriver();
            driver = driverWrapper.getScanDriver();
            driver.get(urlParams.getApplicationurl());
        }

        js = (JavascriptExecutor) driver;
        String input;
        String paramWithAlert = null;

        List<VaElement> elements = vaElementRepository.findAllByUrlMappingOrderByOrderpos(urlParams);
        VaElement e;

        for (int j = 0; j < elements.size(); j++) {
            e = elements.get(j);

            // Get input value, if necessary use default value.
            input = params.get(e.getParameter());
            if (input == null) {
                input = e.getDefaultValue();
                if (input == null) {
                    input = e.getNativeHtmlMapping().getDefaultValue();
                }
            }

            // Check if param contains an alert.
            if (input != null && input.contains("alert")) {
                paramWithAlert = input;
            }

            LOG.debug("Execute action with input '" + input + "' for element with HTML Tag '" + e.getNativeHtmlMapping().getHtmltag() + "'.");

            try {
                JSONArray shadowRoute = new JSONArray(e.getShadowRoute());
                if (shadowRoute.length() > 0) {
                    // Element is in shadow DOM. Loop through shadow roots.
                    LOG.debug("Element is in shadow DOM. Loop through parents to find element.");
                    JSONObject curShadowNode;
                    curShadowNode = shadowRoute.getJSONObject(0);
                    StringBuilder script = new StringBuilder("window.proxyelement = document.querySelectorAll('" + curShadowNode.getString("tag") + "')[" + curShadowNode.getInt("pos") + "]");
                    for (int i = 1; i < shadowRoute.length(); i++) {
                        curShadowNode = shadowRoute.getJSONObject(i);
                        script.append(".shadowRoot.querySelectorAll('" + curShadowNode.getString("tag") + "')[" + curShadowNode.getInt("pos") + "]");
                    }
                    script.append(".shadowRoot.querySelectorAll('" + e.getNativeHtmlMapping().getHtmltag() + "')[" + e.getPosition() + "];");

                    js.executeScript(script.toString());
                } else {
                    js.executeScript("window.proxyelement = document.querySelectorAll('" + e.getNativeHtmlMapping().getHtmltag() + "')[" + e.getPosition() + "];");
                }

            } catch (JSONException e1) {
                e1.printStackTrace();
            }

            AbstractAction ac = actions.get(e.getNativeHtmlMapping().getNativeHtml());

            if (ac == null) {
                LOG.debug("Action class '" + e.getNativeHtmlMapping().getNativeHtml() + "' was not found.");
                lastStatus = HttpStatus.NOT_IMPLEMENTED;
                return "Internal Error - Action class was not found.";
            }
            ac.performAction(prepareInput(input), js);

            if (ac.getName().equals("button") && j < elements.size() - 1) {
                try {
                    // Wait a short time. You don't know how long it takes selenium to execute the script.
                    // Especially buttons during routing can take long because they can open a dialog.
                    TimeUnit.MILLISECONDS.sleep(2500);
                } catch (InterruptedException e1) {
                    e1.printStackTrace();
                }
            }
        }

        // Check if alert was opened.
        try {
            // Wait for possible alerts to be opened.
            TimeUnit.MILLISECONDS.sleep(200);
            Alert alert = driver.switchTo().alert();
            alert.accept();
            LOG.debug("New alert was detected. Sending HTTP INTERNAL SERVER ERROR response.");
            lastStatus = HttpStatus.INTERNAL_SERVER_ERROR;
            String pagecode = js.executeScript("return document.getElementsByTagName('body')[0].outerHTML;").toString();
            return "<p>It is likely that the input '" + paramWithAlert + "' exploits a XSS vulnerability. An alert was opened with the following source code:</p>" + pagecode;
        } catch (NoAlertPresentException ex) {
            LOG.debug("No alert was found.");
        } catch (InterruptedException exc) {
            exc.printStackTrace();
        }

        String pagecode = js.executeScript("return document.getElementsByTagName('body')[0].outerHTML;").toString();

        // Check if pagecode contains error.
        if (pagecode.contains("\"v-system-error\"") || pagecode.contains(">Internal error<")) {
            LOG.debug("Actions were successfully executed but an error occurred in the Vaadin application. Sending HTTP INTERNAL SERVER ERROR response.");
            lastStatus = HttpStatus.INTERNAL_SERVER_ERROR;
        } else {
            LOG.debug("Actions were successfully executed. Sending HTTP OK response.");
            lastStatus = HttpStatus.OK;
        }

        return pagecode;
    }

    public HttpStatus getStatusCode() {
        return lastStatus;
    }

    private String prepareInput(String input) {
        if (input == null) {
            return "";
        }

        String escaped = input.replace("\\0", "");
        escaped = escaped.replace("\\", "\\\\");
        escaped = escaped.replace("\"", "\\\"");
        escaped = escaped.replace("\'", "\\\'");

        return escaped;
    }
}
